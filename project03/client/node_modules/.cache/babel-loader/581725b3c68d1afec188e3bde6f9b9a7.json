{"ast":null,"code":"var _jsxFileName = \"C:\\\\bootcamp\\\\ReactProject3\\\\project03\\\\src\\\\components\\\\games\\\\TicTacToe.js\";\nimport React, { useState } from \"react\";\nimport \"../styles/TicTacToe.css\";\n\nfunction TicTacToe() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Square, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }));\n} // square\n// value(props)\n// onClick function (prop)\n\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, props.value);\n} // Creating the Board component\n\n\nfunction Board() {\n  // Creating the state of the board and filling an array with empty values\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null)); // Creating the turn state and setting the state to true so x's turn is first\n\n  const [xTurn, setXTurn] = useState(true);\n} // Creating handleClick function\n\n\nhandleClick = index => {\n  // Making a copy of the board state\n  const newSquares = [...boardSquares]; // if the index of the board is fill, return\n\n  if (newSquares[index]) {\n    return;\n  } // mutate that copy, add X or O and calculate turns\n\n\n  newSquares[index] = xTurn ? \"X\" : \"O\"; // calculate next turn\n  // set the state of the board\n  // set the state of the turn\n  // create our board\n}; // create a render square function\n// take in an index\n// return a square, with the correct value and function\n// Initiliaze status\n// function that calculates the winner\n// get our set of winning lines\n// loop through this set\n// check to see if values in our squares fulfill the winning requirement\n// If so, return X or O\n// else, return nothing\n\n\nexport default TicTacToe;","map":{"version":3,"sources":["C:/bootcamp/ReactProject3/project03/src/components/games/TicTacToe.js"],"names":["React","useState","TicTacToe","Square","props","onClick","value","Board","boardSquares","setBoardSquares","Array","fill","xTurn","setXTurn","handleClick","index","newSquares"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,yBAAP;;AAEA,SAASC,SAAT,GAAqB;AACnB,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,C,CAED;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,sBACE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACE,KADT,CADF;AAKD,C,CAED;;;AACA,SAASC,KAAT,GAAiB;AACf;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAACS,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAhD,CAFe,CAGf;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;AACD,C,CAED;;;AACAa,WAAW,GAAIC,KAAD,IAAW;AACvB;AACA,QAAMC,UAAU,GAAG,CAAC,GAAGR,YAAJ,CAAnB,CAFuB,CAGvB;;AACA,MAAIQ,UAAU,CAACD,KAAD,CAAd,EAAuB;AACrB;AACD,GANsB,CAOvB;;;AACAC,EAAAA,UAAU,CAACD,KAAD,CAAV,GAAoBH,KAAK,GAAG,GAAH,GAAS,GAAlC,CARuB,CASvB;AACA;AACA;AAEA;AACD,CAdD,C,CAgBA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;AAEA,eAAeV,SAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/TicTacToe.css\";\r\n\r\nfunction TicTacToe() {\r\n  return (\r\n    <div>\r\n      <Square />\r\n    </div>\r\n  );\r\n}\r\n\r\n// square\r\n// value(props)\r\n// onClick function (prop)\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Creating the Board component\r\nfunction Board() {\r\n  // Creating the state of the board and filling an array with empty values\r\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null));\r\n  // Creating the turn state and setting the state to true so x's turn is first\r\n  const [xTurn, setXTurn] = useState(true);\r\n}\r\n\r\n// Creating handleClick function\r\nhandleClick = (index) => {\r\n  // Making a copy of the board state\r\n  const newSquares = [...boardSquares];\r\n  // if the index of the board is fill, return\r\n  if (newSquares[index]) {\r\n    return;\r\n  }\r\n  // mutate that copy, add X or O and calculate turns\r\n  newSquares[index] = xTurn ? \"X\" : \"O\";\r\n  // calculate next turn\r\n  // set the state of the board\r\n  // set the state of the turn\r\n\r\n  // create our board\r\n};\r\n\r\n// create a render square function\r\n// take in an index\r\n// return a square, with the correct value and function\r\n\r\n// Initiliaze status\r\n\r\n// function that calculates the winner\r\n\r\n// get our set of winning lines\r\n\r\n// loop through this set\r\n// check to see if values in our squares fulfill the winning requirement\r\n// If so, return X or O\r\n// else, return nothing\r\n\r\nexport default TicTacToe;\r\n"]},"metadata":{},"sourceType":"module"}