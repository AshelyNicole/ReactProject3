{"ast":null,"code":"var _jsxFileName = \"C:\\\\bootcamp\\\\ReactProject3\\\\project03\\\\src\\\\components\\\\games\\\\TicTacToe.js\";\nimport React, { useState } from \"react\";\nimport \"../styles/TicTacToe.css\";\n\nfunction TicTacToe() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }));\n} // square\n// value(props)\n// onClick function (prop)\n\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, props.value);\n} // Creating the Board component\n\n\nfunction Board() {\n  // Creating the state of the board and filling an array with empty values\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null)); // Creating the turn state and setting the state to true so x's turn is first\n\n  const [xIsNext, setXIsNext] = useState(true); // Creating handleClick function\n\n  const handleClick = index => {\n    // Making a copy of the board state\n    const squares = [...boardSquares]; // if the index of the board is fill, return\n\n    if (squares[index]) return; // mutate that copy, add X or O and calculate turns\n\n    squares[index] = xIsNext ? \"X\" : \"O\"; // set the state of the board\n\n    setBoardSquares(newSquares); // set the state of the turn\n\n    setXTurn(!setXTurn);\n  }; // create a render square function\n\n\n  const renderSquares = index => {\n    // take in an index\n    return (\n      /*#__PURE__*/\n      // return a square, with the correct value and function\n      React.createElement(Square, {\n        value: boardSquares[index],\n        onClick: () => handleClick(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      })\n    );\n  }; // Setting the turn order\n\n\n  const turnOrder = `Next player: ${xTurn ? \"X\" : \"O\"}`;\n  return (\n    /*#__PURE__*/\n    // Creating the board and rendering turn order\n    React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"turn-order\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, turnOrder), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, renderSquares(0), \" \", renderSquares(1), \" \", renderSquares(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, renderSquares(3), \" \", renderSquares(4), \" \", renderSquares(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, renderSquares(6), \" \", renderSquares(7), \" \", renderSquares(8)))\n  );\n} // function that calculates the winner\n// get our set of winning lines\n// loop through this set\n// check to see if values in our squares fulfill the winning requirement\n// If so, return X or O\n// else, return nothing\n\n\nexport default TicTacToe;","map":{"version":3,"sources":["C:/bootcamp/ReactProject3/project03/src/components/games/TicTacToe.js"],"names":["React","useState","TicTacToe","Square","props","onClick","value","Board","boardSquares","setBoardSquares","Array","fill","xIsNext","setXIsNext","handleClick","index","squares","newSquares","setXTurn","renderSquares","turnOrder","xTurn"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,yBAAP;;AAEA,SAASC,SAAT,GAAqB;AACnB,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,C,CAED;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,sBACE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACE,KADT,CADF;AAKD,C,CAED;;;AACA,SAASC,KAAT,GAAiB;AACf;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAACS,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAhD,CAFe,CAGf;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC,CAJe,CAMf;;AACA,QAAMa,WAAW,GAAGC,KAAK,IAAI;AAC3B;AACA,UAAMC,OAAO,GAAG,CAAC,GAAGR,YAAJ,CAAhB,CAF2B,CAG3B;;AACA,QAAIQ,OAAO,CAACD,KAAD,CAAX,EAAoB,OAJO,CAK3B;;AACAC,IAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBH,OAAO,GAAG,GAAH,GAAS,GAAjC,CAN2B,CAO3B;;AACAH,IAAAA,eAAe,CAACQ,UAAD,CAAf,CAR2B,CAS3B;;AACAC,IAAAA,QAAQ,CAAC,CAACA,QAAF,CAAR;AACD,GAXD,CAPe,CAmBf;;;AACA,QAAMC,aAAa,GAAIJ,KAAD,IAAW;AAC/B;AACA;AAAA;AACE;AACA,0BAAC,MAAD;AAAQ,QAAA,KAAK,EAAEP,YAAY,CAACO,KAAD,CAA3B;AAAoC,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAID,GAND,CApBe,CA2Bf;;;AACA,QAAMK,SAAS,GAAI,gBAAeC,KAAK,GAAG,GAAH,GAAS,GAAI,EAApD;AAEA;AAAA;AACE;AACA;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BD,SAA7B,CADF,eAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,aAAa,CAAC,CAAD,CADhB,OACsBA,aAAa,CAAC,CAAD,CADnC,OACyCA,aAAa,CAAC,CAAD,CADtD,CAFF,eAKE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,aAAa,CAAC,CAAD,CADhB,OACsBA,aAAa,CAAC,CAAD,CADnC,OACyCA,aAAa,CAAC,CAAD,CADtD,CALF,eAQE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,aAAa,CAAC,CAAD,CADhB,OACsBA,aAAa,CAAC,CAAD,CADnC,OACyCA,aAAa,CAAC,CAAD,CADtD,CARF;AAFF;AAeD,C,CACD;AAEA;AAEA;AACA;AACA;AACA;;;AAEA,eAAejB,SAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/TicTacToe.css\";\r\n\r\nfunction TicTacToe() {\r\n  return (\r\n    <div>\r\n      <Board />\r\n    </div>\r\n  );\r\n}\r\n\r\n// square\r\n// value(props)\r\n// onClick function (prop)\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Creating the Board component\r\nfunction Board() {\r\n  // Creating the state of the board and filling an array with empty values\r\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null));\r\n  // Creating the turn state and setting the state to true so x's turn is first\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n\r\n  // Creating handleClick function\r\n  const handleClick = index => {\r\n    // Making a copy of the board state\r\n    const squares = [...boardSquares];\r\n    // if the index of the board is fill, return\r\n    if (squares[index]) return;\r\n    // mutate that copy, add X or O and calculate turns\r\n    squares[index] = xIsNext ? \"X\" : \"O\";\r\n    // set the state of the board\r\n    setBoardSquares(newSquares);\r\n    // set the state of the turn\r\n    setXTurn(!setXTurn);\r\n  };\r\n  // create a render square function\r\n  const renderSquares = (index) => {\r\n    // take in an index\r\n    return (\r\n      // return a square, with the correct value and function\r\n      <Square value={boardSquares[index]} onClick={() => handleClick(index)} />\r\n    );\r\n  };\r\n  // Setting the turn order\r\n  const turnOrder = `Next player: ${xTurn ? \"X\" : \"O\"}`;\r\n\r\n  return (\r\n    // Creating the board and rendering turn order\r\n    <div className=\"board\">\r\n      <div className=\"turn-order\">{turnOrder}</div>\r\n      <div className=\"row\">\r\n        {renderSquares(0)} {renderSquares(1)} {renderSquares(2)}\r\n      </div>\r\n      <div className=\"row\">\r\n        {renderSquares(3)} {renderSquares(4)} {renderSquares(5)}\r\n      </div>\r\n      <div className=\"row\">\r\n        {renderSquares(6)} {renderSquares(7)} {renderSquares(8)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// function that calculates the winner\r\n\r\n// get our set of winning lines\r\n\r\n// loop through this set\r\n// check to see if values in our squares fulfill the winning requirement\r\n// If so, return X or O\r\n// else, return nothing\r\n\r\nexport default TicTacToe;\r\n"]},"metadata":{},"sourceType":"module"}