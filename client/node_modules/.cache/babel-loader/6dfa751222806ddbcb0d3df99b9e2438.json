{"ast":null,"code":"var _jsxFileName = \"C:\\\\bootcamp\\\\ReactProject3\\\\project03\\\\src\\\\components\\\\games\\\\TicTacToe.js\";\nimport React, { useState } from \"react\";\nimport \"../styles/TicTacToe.css\";\n\nfunction TicTacToe() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Board, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Header() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"jumbotron jumbotron-fluid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    class: \"display-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }\n  }, \"TIC-TAC-TOE\"), /*#__PURE__*/React.createElement(\"p\", {\n    class: \"lead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }\n  }, \"Three-In-a-Row to Win!\"))));\n} // square\n// value(props)\n// onClick function (prop)\n\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, props.value);\n} // Creating the Board component\n\n\nfunction Board() {\n  // Creating the state of the board and filling an array with empty values\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null)); // Creating the turn state and setting the state to true so x's turn is first\n\n  const [xTurn, setXTurn] = useState(true); // Creating handleClick function\n\n  const handleClick = index => {\n    // Making a copy of the board state\n    const newSquares = [...boardSquares]; // if the index of the board is fill or there is a winner, return null\n\n    if (newSquares[index] || winner) {\n      return null;\n    } // mutate that copy, add X or O and calculate turns\n\n\n    newSquares[index] = xTurn ? \"X\" : \"O\"; // set the state of the board\n\n    setBoardSquares(newSquares); // set the state of the turn\n\n    setXTurn(!xTurn);\n  }; // create a render square function and pass in index\n\n\n  const renderSquares = index => {\n    return (\n      /*#__PURE__*/\n      // return a square, with the correct value and function\n      React.createElement(Square, {\n        value: boardSquares[index],\n        onClick: () => handleClick(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      })\n    );\n  }; // Setting the turn order\n\n\n  const winner = calculateWinner(boardSquares);\n  const turnOrder = winner ? `Winner is: ${winner}` : `Next player: ${xTurn ? \"X\" : \"O\"}`;\n  return (\n    /*#__PURE__*/\n    // Creating the board and rendering turn order\n    React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"turn-order\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, turnOrder), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, renderSquares(0), \" \", renderSquares(1), \" \", renderSquares(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, renderSquares(3), \" \", renderSquares(4), \" \", renderSquares(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, renderSquares(6), \" \", renderSquares(7), \" \", renderSquares(8)))\n  );\n} // function that calculates the winner\n\n\nfunction calculateWinner(squares) {\n  // array of winning combinations\n  const winningCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // loop through winning combinations\n\n  for (let i = 0; i < winningCombinations.length; i++) {\n    const [one, two, three] = winningCombinations[i]; // check to see if values in the squares fulfill the winning combinations; If so, return X or O; else, return nothing\n\n    if (squares[one] && squares[one] === squares[two] && squares[two] === squares[three]) {\n      return squares[one];\n    }\n  }\n\n  return null;\n}\n\nexport default TicTacToe;","map":{"version":3,"sources":["C:/bootcamp/ReactProject3/project03/src/components/games/TicTacToe.js"],"names":["React","useState","TicTacToe","Header","Square","props","onClick","value","Board","boardSquares","setBoardSquares","Array","fill","xTurn","setXTurn","handleClick","index","newSquares","winner","renderSquares","calculateWinner","turnOrder","squares","winningCombinations","i","length","one","two","three"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"../styles/TicTacToe.css\";\n\nfunction TicTacToe() {\n  return (\n    <div>\n      <Header />\n      <Board />\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div>\n      <div class=\"jumbotron jumbotron-fluid\">\n        <div class=\"container\">\n          <h1 class=\"display-4\">TIC-TAC-TOE</h1>\n          <p class=\"lead\">Three-In-a-Row to Win!</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// square\n// value(props)\n// onClick function (prop)\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\n// Creating the Board component\nfunction Board() {\n  // Creating the state of the board and filling an array with empty values\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null));\n  // Creating the turn state and setting the state to true so x's turn is first\n  const [xTurn, setXTurn] = useState(true);\n\n  // Creating handleClick function\n  const handleClick = (index) => {\n    // Making a copy of the board state\n    const newSquares = [...boardSquares];\n    // if the index of the board is fill or there is a winner, return null\n    if (newSquares[index] || winner) {\n      return null;\n    }\n    // mutate that copy, add X or O and calculate turns\n    newSquares[index] = xTurn ? \"X\" : \"O\";\n    // set the state of the board\n    setBoardSquares(newSquares);\n    // set the state of the turn\n    setXTurn(!xTurn);\n  };\n  // create a render square function and pass in index\n  const renderSquares = (index) => {\n    return (\n      // return a square, with the correct value and function\n      <Square value={boardSquares[index]} onClick={() => handleClick(index)} />\n    );\n  };\n  // Setting the turn order\n  const winner = calculateWinner(boardSquares);\n  const turnOrder = winner\n    ? `Winner is: ${winner}`\n    : `Next player: ${xTurn ? \"X\" : \"O\"}`;\n\n  return (\n    // Creating the board and rendering turn order\n    <div className=\"board\">\n      <div className=\"turn-order\">{turnOrder}</div>\n      <div className=\"row\">\n        {renderSquares(0)} {renderSquares(1)} {renderSquares(2)}\n      </div>\n      <div className=\"row\">\n        {renderSquares(3)} {renderSquares(4)} {renderSquares(5)}\n      </div>\n      <div className=\"row\">\n        {renderSquares(6)} {renderSquares(7)} {renderSquares(8)}\n      </div>\n    </div>\n  );\n}\n\n// function that calculates the winner\nfunction calculateWinner(squares) {\n  // array of winning combinations\n  const winningCombinations = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  // loop through winning combinations\n  for (let i = 0; i < winningCombinations.length; i++) {\n    const [one, two, three] = winningCombinations[i];\n    // check to see if values in the squares fulfill the winning combinations; If so, return X or O; else, return nothing\n    if (\n      squares[one] &&\n      squares[one] === squares[two] &&\n      squares[two] === squares[three]\n    ) {\n      return squares[one];\n    }\n  }\n  return null;\n}\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}